#+TITLE: xReact Fantasy
#+Date: <2017-09-09 Sat>
#+AUTHOR: 欧阳继超
#+PROPERTY: :exports source :tangle yes :eval no-export

* imports
#+BEGIN_SRC emacs-lisp
(require 'ob-typescript)
#+END_SRC

#+BEGIN_SRC typescript :tangle test.tsx
import {pure, lift2, X, xinput, fromEvent, traverse} from '../src'
import * as React from 'react';
import { render } from 'react-dom';
import * as RX from '../src/xs/rx'
function xmount(component, dom) {render(React.createFactory(X)({ x: RX }, component), dom)}
#+END_SRC


* Example 1: Two number multiply

#+BEGIN_SRC tsx :tangle test.tsx
let Xeg1 = lift2((x:number,y: number) => x * y)(pure(6), pure(5))
let ViewEg1 = props => <p>{props.product}</p>
let Eg1 = Xeg1.map(a=>({product: a})).apply(ViewEg1)
#+END_SRC

#+BEGIN_SRC tsx :tangle test.tsx :exports none
xmount(<Eg1/>, document.getElementById('eg1') )
#+END_SRC

#+HTML: <p><div id="eg1"></div></p>


* Example 2: Two Number inputs
#+BEGIN_SRC tsx :tangle test.tsx
let Xeg2 = lift2((x:number,y: number) => x * y)(fromEvent('change', 'n1', '5').map(x=>~~x), fromEvent('change', 'n2', '6').map(x=>~~x))
let ViewEg2 = props => <section>
  <p><input type="number" name="n1" onChange={props.actions.fromEvent} defaultValue="5"/></p>
  <p><input type="number" name="n2" onChange={props.actions.fromEvent} defaultValue="6"/></p>
  <p>{props.product}</p>
</section>
let Eg2 = Xeg2.map(a=>({product: a})).apply(ViewEg2)
#+END_SRC

#+BEGIN_SRC tsx :tangle test.tsx :exports none
xmount(<Eg2/>, document.getElementById('eg2') )
#+END_SRC

#+HTML: <p><div id="eg2"></div></p>

* Example 3: Semigroup
#+BEGIN_SRC tsx :tangle test.tsx
let Xeg3 = fromEvent('change', 'string1', 'Jichao')
.concat(pure(' '))
.concat(fromEvent('change', 'string2', 'Ouyang'))

let ViewEg3 = props => <section>
  <p><input type="text" name="string1" onChange={props.actions.fromEvent} /></p>
  <p><input type="text" name="string2" onChange={props.actions.fromEvent} /></p>
  <p>{props.semigroup}</p>
</section>

let Eg3 = Xeg3.map(a=>({semigroup: a})).apply(ViewEg3)
#+END_SRC

#+BEGIN_SRC tsx :tangle test.tsx :exports none
xmount(<Eg3/>, document.getElementById('eg3') )
#+END_SRC

#+HTML: <p><div id="eg3"></div></p>

* Example 4: Traverse



#+BEGIN_SRC tsx :tangle test.tsx
function sum(list){
  return list.reduce((acc,x)=> acc+x, 0)
}
let list = ['1', '2', '3', '4', '5', '6', '7']
let Xeg4 = traverse(
  (defaultVal, index)=>(fromEvent('change', 'traverse'+index, defaultVal)),
  list)
  .map(xs=>xs.map(x=>~~x))
  .map(sum)

let ViewEg4 = props => <section>
{list.map((item, index) => (<p>
<input key={index} type="number" name={"traverse" + index} onChange={props.actions.fromEvent} defaultValue={item} />
</p>))
}
  <p>{props.sum}</p>
</section>

let Eg4 = Xeg4.map(a=>({sum: a})).apply(ViewEg4)
#+END_SRC

#+BEGIN_SRC tsx :tangle test.tsx :exports none
  xmount(<Eg4/>, document.getElementById('eg4') )
#+END_SRC

#+HTML: <p><div id="eg4"></div></p>

#+HTML: <script src="test.js"></script>
